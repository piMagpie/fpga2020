-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity servo_v3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_left : IN STD_LOGIC_VECTOR (7 downto 0);
    in_right : IN STD_LOGIC_VECTOR (7 downto 0);
    in_up : IN STD_LOGIC_VECTOR (7 downto 0);
    in_down : IN STD_LOGIC_VECTOR (7 downto 0);
    out_speed : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_speed_ap_vld : OUT STD_LOGIC;
    out_control : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of servo_v3 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "servo_v3,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.261500,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=120,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal speed : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln27_fu_119_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_speed_loc_1_phi_fu_54_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln25_fu_63_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_92_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln39_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_fu_86_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln27_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_113_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    speed_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln25_fu_63_p2 = ap_const_lv1_1)) then 
                    speed <= select_ln27_fu_119_p3;
                elsif (((icmp_ln39_fu_74_p2 = ap_const_lv1_1) and (icmp_ln25_fu_63_p2 = ap_const_lv1_0))) then 
                    speed <= select_ln41_fu_92_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln33_fu_113_p2 <= std_logic_vector(unsigned(speed) + unsigned(ap_const_lv8_1));
    add_ln47_fu_86_p2 <= std_logic_vector(unsigned(speed) + unsigned(ap_const_lv8_FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_speed_loc_1_phi_fu_54_p6_assign_proc : process(ap_CS_fsm_state1, speed, select_ln27_fu_119_p3, icmp_ln25_fu_63_p2, select_ln41_fu_92_p3, icmp_ln39_fu_74_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if (((icmp_ln39_fu_74_p2 = ap_const_lv1_0) and (icmp_ln25_fu_63_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_speed_loc_1_phi_fu_54_p6 <= speed;
            elsif (((icmp_ln39_fu_74_p2 = ap_const_lv1_1) and (icmp_ln25_fu_63_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_speed_loc_1_phi_fu_54_p6 <= select_ln41_fu_92_p3;
            elsif ((icmp_ln25_fu_63_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_speed_loc_1_phi_fu_54_p6 <= select_ln27_fu_119_p3;
            else 
                ap_phi_mux_speed_loc_1_phi_fu_54_p6 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_speed_loc_1_phi_fu_54_p6 <= "XXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln25_fu_63_p2 <= "1" when (in_up = ap_const_lv8_1) else "0";
    icmp_ln27_fu_107_p2 <= "1" when (speed = ap_const_lv8_8) else "0";
    icmp_ln39_fu_74_p2 <= "1" when (in_down = ap_const_lv8_1) else "0";
    icmp_ln41_fu_80_p2 <= "1" when (speed = ap_const_lv8_0) else "0";
    out_speed <= ap_phi_mux_speed_loc_1_phi_fu_54_p6;

    out_speed_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_speed_ap_vld <= ap_const_logic_1;
        else 
            out_speed_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln27_fu_119_p3 <= 
        ap_const_lv8_8 when (icmp_ln27_fu_107_p2(0) = '1') else 
        add_ln33_fu_113_p2;
    select_ln41_fu_92_p3 <= 
        ap_const_lv8_0 when (icmp_ln41_fu_80_p2(0) = '1') else 
        add_ln47_fu_86_p2;
end behav;

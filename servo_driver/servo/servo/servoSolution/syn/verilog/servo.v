// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="servo,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.638250,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8,HLS_SYN_LUT=93,HLS_VERSION=2019_2}" *)

module servo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        up,
        down,
        left_r,
        right_r,
        dutyCycle,
        dutyCycle_ap_vld,
        speed,
        speed_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] up;
input  [7:0] down;
input  [7:0] left_r;
input  [7:0] right_r;
output  [7:0] dutyCycle;
output   dutyCycle_ap_vld;
output  [7:0] speed;
output   speed_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dutyCycle_ap_vld;
reg speed_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] current_speed;
wire   [6:0] select_ln26_1_fu_157_p3;
wire   [7:0] zext_ln9_fu_83_p1;
wire   [0:0] icmp_ln8_fu_73_p2;
wire   [7:0] add_ln9_fu_87_p2;
wire   [7:0] select_ln8_fu_93_p3;
wire   [0:0] icmp_ln12_fu_101_p2;
wire   [7:0] add_ln13_fu_107_p2;
wire   [7:0] select_ln12_fu_113_p3;
wire   [4:0] tmp_fu_125_p4;
wire   [0:0] tmp_1_fu_141_p3;
wire   [6:0] trunc_ln26_fu_121_p1;
wire   [0:0] icmp_ln26_fu_135_p2;
wire   [6:0] select_ln26_fu_149_p3;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 current_speed = 7'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        current_speed <= select_ln26_1_fu_157_p3;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dutyCycle_ap_vld = 1'b1;
    end else begin
        dutyCycle_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        speed_ap_vld = 1'b1;
    end else begin
        speed_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_107_p2 = (8'd1 + select_ln8_fu_93_p3);

assign add_ln9_fu_87_p2 = ($signed(8'd255) + $signed(zext_ln9_fu_83_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign dutyCycle = 8'd200;

assign icmp_ln12_fu_101_p2 = ((up == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_135_p2 = (($signed(tmp_fu_125_p4) < $signed(5'd1)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_73_p2 = ((down == 8'd0) ? 1'b1 : 1'b0);

assign select_ln12_fu_113_p3 = ((icmp_ln12_fu_101_p2[0:0] === 1'b1) ? select_ln8_fu_93_p3 : add_ln13_fu_107_p2);

assign select_ln26_1_fu_157_p3 = ((icmp_ln26_fu_135_p2[0:0] === 1'b1) ? select_ln26_fu_149_p3 : 7'd8);

assign select_ln26_fu_149_p3 = ((tmp_1_fu_141_p3[0:0] === 1'b1) ? 7'd0 : trunc_ln26_fu_121_p1);

assign select_ln8_fu_93_p3 = ((icmp_ln8_fu_73_p2[0:0] === 1'b1) ? zext_ln9_fu_83_p1 : add_ln9_fu_87_p2);

assign speed = select_ln26_1_fu_157_p3;

assign tmp_1_fu_141_p3 = select_ln12_fu_113_p3[32'd7];

assign tmp_fu_125_p4 = {{select_ln12_fu_113_p3[7:3]}};

assign trunc_ln26_fu_121_p1 = select_ln12_fu_113_p3[6:0];

assign zext_ln9_fu_83_p1 = current_speed;

endmodule //servo

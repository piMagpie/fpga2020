// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _servo_HH_
#define _servo_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct servo : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > up;
    sc_in< sc_lv<8> > down;
    sc_in< sc_lv<8> > left_r;
    sc_in< sc_lv<8> > right_r;
    sc_out< sc_lv<8> > dutyCycle;
    sc_out< sc_logic > dutyCycle_ap_vld;
    sc_out< sc_lv<8> > speed;
    sc_out< sc_logic > speed_ap_vld;


    // Module declarations
    servo(sc_module_name name);
    SC_HAS_PROCESS(servo);

    ~servo();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > current_speed;
    sc_signal< sc_lv<7> > select_ln26_1_fu_157_p3;
    sc_signal< sc_lv<8> > zext_ln9_fu_83_p1;
    sc_signal< sc_lv<1> > icmp_ln8_fu_73_p2;
    sc_signal< sc_lv<8> > add_ln9_fu_87_p2;
    sc_signal< sc_lv<8> > select_ln8_fu_93_p3;
    sc_signal< sc_lv<1> > icmp_ln12_fu_101_p2;
    sc_signal< sc_lv<8> > add_ln13_fu_107_p2;
    sc_signal< sc_lv<8> > select_ln12_fu_113_p3;
    sc_signal< sc_lv<5> > tmp_fu_125_p4;
    sc_signal< sc_lv<1> > tmp_1_fu_141_p3;
    sc_signal< sc_lv<7> > trunc_ln26_fu_121_p1;
    sc_signal< sc_lv<1> > icmp_ln26_fu_135_p2;
    sc_signal< sc_lv<7> > select_ln26_fu_149_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<8> ap_const_lv8_C8;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<7> ap_const_lv7_8;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln13_fu_107_p2();
    void thread_add_ln9_fu_87_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_dutyCycle();
    void thread_dutyCycle_ap_vld();
    void thread_icmp_ln12_fu_101_p2();
    void thread_icmp_ln26_fu_135_p2();
    void thread_icmp_ln8_fu_73_p2();
    void thread_select_ln12_fu_113_p3();
    void thread_select_ln26_1_fu_157_p3();
    void thread_select_ln26_fu_149_p3();
    void thread_select_ln8_fu_93_p3();
    void thread_speed();
    void thread_speed_ap_vld();
    void thread_tmp_1_fu_141_p3();
    void thread_tmp_fu_125_p4();
    void thread_trunc_ln26_fu_121_p1();
    void thread_zext_ln9_fu_83_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

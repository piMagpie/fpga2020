// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _servo_HH_
#define _servo_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct servo : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_up;
    sc_in< sc_lv<8> > p_down;
    sc_in< sc_lv<8> > p_left;
    sc_in< sc_lv<8> > p_right;
    sc_out< sc_lv<8> > p_dutyCycle;
    sc_out< sc_logic > p_dutyCycle_ap_vld;
    sc_out< sc_lv<8> > p_speed;
    sc_out< sc_logic > p_speed_ap_vld;


    // Module declarations
    servo(sc_module_name name);
    SC_HAS_PROCESS(servo);

    ~servo();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > current_speed;
    sc_signal< sc_lv<8> > current_duty_cycle;
    sc_signal< sc_lv<8> > select_ln13_fu_172_p3;
    sc_signal< sc_lv<8> > select_ln13_reg_313;
    sc_signal< sc_lv<1> > icmp_ln17_fu_180_p2;
    sc_signal< sc_lv<1> > icmp_ln17_reg_320;
    sc_signal< sc_lv<9> > zext_ln17_1_fu_200_p1;
    sc_signal< sc_lv<9> > zext_ln17_1_reg_333;
    sc_signal< sc_lv<9> > sub_ln17_fu_204_p2;
    sc_signal< sc_lv<9> > sub_ln17_reg_338;
    sc_signal< sc_lv<1> > or_ln13_fu_166_p2;
    sc_signal< sc_lv<8> > select_ln21_1_fu_295_p3;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > or_ln21_fu_289_p2;
    sc_signal< sc_lv<1> > icmp_ln9_fu_84_p2;
    sc_signal< sc_lv<1> > icmp_ln9_1_fu_94_p2;
    sc_signal< sc_lv<1> > or_ln9_1_fu_112_p2;
    sc_signal< sc_lv<1> > or_ln9_fu_100_p2;
    sc_signal< sc_lv<8> > add_ln10_fu_106_p2;
    sc_signal< sc_lv<8> > select_ln9_fu_124_p3;
    sc_signal< sc_lv<5> > tmp_fu_138_p4;
    sc_signal< sc_lv<1> > icmp_ln13_fu_132_p2;
    sc_signal< sc_lv<1> > icmp_ln13_1_fu_148_p2;
    sc_signal< sc_lv<1> > and_ln13_fu_154_p2;
    sc_signal< sc_lv<1> > xor_ln9_fu_118_p2;
    sc_signal< sc_lv<8> > add_ln14_fu_160_p2;
    sc_signal< sc_lv<9> > zext_ln17_fu_196_p1;
    sc_signal< sc_lv<1> > icmp_ln17_1_fu_210_p2;
    sc_signal< sc_lv<8> > sub_ln18_fu_215_p2;
    sc_signal< sc_lv<1> > xor_ln17_fu_226_p2;
    sc_signal< sc_lv<8> > select_ln17_fu_219_p3;
    sc_signal< sc_lv<8> > select_ln17_1_fu_237_p3;
    sc_signal< sc_lv<9> > zext_ln21_fu_249_p1;
    sc_signal< sc_lv<9> > add_ln21_fu_253_p2;
    sc_signal< sc_lv<1> > icmp_ln21_1_fu_258_p2;
    sc_signal< sc_lv<8> > add_ln22_fu_264_p2;
    sc_signal< sc_lv<1> > icmp_ln21_fu_243_p2;
    sc_signal< sc_lv<1> > xor_ln21_fu_277_p2;
    sc_signal< sc_lv<1> > and_ln17_fu_231_p2;
    sc_signal< sc_lv<1> > and_ln21_fu_283_p2;
    sc_signal< sc_lv<8> > select_ln21_fu_269_p3;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<9> ap_const_lv9_63;
    static const sc_lv<9> ap_const_lv9_C9;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_106_p2();
    void thread_add_ln14_fu_160_p2();
    void thread_add_ln21_fu_253_p2();
    void thread_add_ln22_fu_264_p2();
    void thread_and_ln13_fu_154_p2();
    void thread_and_ln17_fu_231_p2();
    void thread_and_ln21_fu_283_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln13_1_fu_148_p2();
    void thread_icmp_ln13_fu_132_p2();
    void thread_icmp_ln17_1_fu_210_p2();
    void thread_icmp_ln17_fu_180_p2();
    void thread_icmp_ln21_1_fu_258_p2();
    void thread_icmp_ln21_fu_243_p2();
    void thread_icmp_ln9_1_fu_94_p2();
    void thread_icmp_ln9_fu_84_p2();
    void thread_or_ln13_fu_166_p2();
    void thread_or_ln21_fu_289_p2();
    void thread_or_ln9_1_fu_112_p2();
    void thread_or_ln9_fu_100_p2();
    void thread_p_dutyCycle();
    void thread_p_dutyCycle_ap_vld();
    void thread_p_speed();
    void thread_p_speed_ap_vld();
    void thread_select_ln13_fu_172_p3();
    void thread_select_ln17_1_fu_237_p3();
    void thread_select_ln17_fu_219_p3();
    void thread_select_ln21_1_fu_295_p3();
    void thread_select_ln21_fu_269_p3();
    void thread_select_ln9_fu_124_p3();
    void thread_sub_ln17_fu_204_p2();
    void thread_sub_ln18_fu_215_p2();
    void thread_tmp_fu_138_p4();
    void thread_xor_ln17_fu_226_p2();
    void thread_xor_ln21_fu_277_p2();
    void thread_xor_ln9_fu_118_p2();
    void thread_zext_ln17_1_fu_200_p1();
    void thread_zext_ln17_fu_196_p1();
    void thread_zext_ln21_fu_249_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

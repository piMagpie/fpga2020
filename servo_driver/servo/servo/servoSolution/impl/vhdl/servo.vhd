-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity servo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    up : IN STD_LOGIC_VECTOR (0 downto 0);
    down : IN STD_LOGIC_VECTOR (0 downto 0);
    left_r : IN STD_LOGIC_VECTOR (0 downto 0);
    right_r : IN STD_LOGIC_VECTOR (0 downto 0);
    dutyCycle_i : IN STD_LOGIC_VECTOR (7 downto 0);
    dutyCycle_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    dutyCycle_o_ap_vld : OUT STD_LOGIC;
    speed : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of servo is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "servo,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.877000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10,HLS_SYN_LUT=79,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln22_fu_87_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln22_reg_108 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln22_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_113 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln14_fu_59_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln3_fu_65_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln18_fu_73_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln3_1_fu_79_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln22_fu_97_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln22_reg_113 <= icmp_ln22_fu_91_p2;
                trunc_ln22_reg_108 <= trunc_ln22_fu_87_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln18_fu_73_p2 <= std_logic_vector(unsigned(speed) + unsigned(select_ln3_fu_65_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dutyCycle_o <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_97_p3),8));

    dutyCycle_o_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dutyCycle_o_ap_vld <= ap_const_logic_1;
        else 
            dutyCycle_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln22_fu_91_p2 <= "1" when (signed(select_ln3_1_fu_79_p3) < signed(ap_const_lv8_64)) else "0";
    select_ln22_fu_97_p3 <= 
        ap_const_lv7_64 when (icmp_ln22_reg_113(0) = '1') else 
        trunc_ln22_reg_108;
    select_ln3_1_fu_79_p3 <= 
        add_ln18_fu_73_p2 when (right_r(0) = '1') else 
        select_ln3_fu_65_p3;
    select_ln3_fu_65_p3 <= 
        sub_ln14_fu_59_p2 when (left_r(0) = '1') else 
        dutyCycle_i;
    sub_ln14_fu_59_p2 <= std_logic_vector(unsigned(dutyCycle_i) - unsigned(speed));
    trunc_ln22_fu_87_p1 <= select_ln3_1_fu_79_p3(7 - 1 downto 0);
end behav;

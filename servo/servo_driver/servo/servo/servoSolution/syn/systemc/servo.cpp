// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "servo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic servo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic servo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> servo::ap_ST_fsm_state1 = "1";
const sc_lv<2> servo::ap_ST_fsm_state2 = "10";
const sc_lv<32> servo::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<8> servo::ap_const_lv8_0 = "00000000";
const sc_lv<1> servo::ap_const_lv1_1 = "1";
const sc_lv<32> servo::ap_const_lv32_1 = "1";
const sc_lv<8> servo::ap_const_lv8_FF = "11111111";
const sc_lv<32> servo::ap_const_lv32_3 = "11";
const sc_lv<32> servo::ap_const_lv32_7 = "111";
const sc_lv<5> servo::ap_const_lv5_0 = "00000";
const sc_lv<8> servo::ap_const_lv8_1 = "1";
const sc_lv<9> servo::ap_const_lv9_63 = "1100011";
const sc_lv<9> servo::ap_const_lv9_C9 = "11001001";
const bool servo::ap_const_boolean_1 = true;

servo::servo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln10_fu_106_p2);
    sensitive << ( current_speed );

    SC_METHOD(thread_add_ln14_fu_160_p2);
    sensitive << ( select_ln9_fu_124_p3 );

    SC_METHOD(thread_add_ln21_fu_253_p2);
    sensitive << ( zext_ln17_1_reg_333 );
    sensitive << ( zext_ln21_fu_249_p1 );

    SC_METHOD(thread_add_ln22_fu_264_p2);
    sensitive << ( select_ln13_reg_313 );
    sensitive << ( select_ln17_1_fu_237_p3 );

    SC_METHOD(thread_and_ln13_fu_154_p2);
    sensitive << ( icmp_ln13_fu_132_p2 );
    sensitive << ( icmp_ln13_1_fu_148_p2 );

    SC_METHOD(thread_and_ln17_fu_231_p2);
    sensitive << ( icmp_ln17_1_fu_210_p2 );
    sensitive << ( xor_ln17_fu_226_p2 );

    SC_METHOD(thread_and_ln21_fu_283_p2);
    sensitive << ( icmp_ln21_1_fu_258_p2 );
    sensitive << ( xor_ln21_fu_277_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln13_1_fu_148_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_138_p4 );

    SC_METHOD(thread_icmp_ln13_fu_132_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_up );

    SC_METHOD(thread_icmp_ln17_1_fu_210_p2);
    sensitive << ( sub_ln17_reg_338 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln17_fu_180_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_left );

    SC_METHOD(thread_icmp_ln21_1_fu_258_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( add_ln21_fu_253_p2 );

    SC_METHOD(thread_icmp_ln21_fu_243_p2);
    sensitive << ( p_right );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln9_1_fu_94_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( current_speed );

    SC_METHOD(thread_icmp_ln9_fu_84_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_down );

    SC_METHOD(thread_or_ln13_fu_166_p2);
    sensitive << ( and_ln13_fu_154_p2 );
    sensitive << ( xor_ln9_fu_118_p2 );

    SC_METHOD(thread_or_ln21_fu_289_p2);
    sensitive << ( and_ln17_fu_231_p2 );
    sensitive << ( and_ln21_fu_283_p2 );

    SC_METHOD(thread_or_ln9_1_fu_112_p2);
    sensitive << ( icmp_ln9_fu_84_p2 );
    sensitive << ( icmp_ln9_1_fu_94_p2 );

    SC_METHOD(thread_or_ln9_fu_100_p2);
    sensitive << ( icmp_ln9_fu_84_p2 );
    sensitive << ( icmp_ln9_1_fu_94_p2 );

    SC_METHOD(thread_p_dutyCycle);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( select_ln17_1_fu_237_p3 );
    sensitive << ( icmp_ln21_fu_243_p2 );
    sensitive << ( select_ln21_fu_269_p3 );

    SC_METHOD(thread_p_dutyCycle_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_p_speed);
    sensitive << ( select_ln13_reg_313 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_p_speed_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_select_ln13_fu_172_p3);
    sensitive << ( select_ln9_fu_124_p3 );
    sensitive << ( and_ln13_fu_154_p2 );
    sensitive << ( add_ln14_fu_160_p2 );

    SC_METHOD(thread_select_ln17_1_fu_237_p3);
    sensitive << ( current_duty_cycle );
    sensitive << ( icmp_ln17_reg_320 );
    sensitive << ( select_ln17_fu_219_p3 );

    SC_METHOD(thread_select_ln17_fu_219_p3);
    sensitive << ( current_duty_cycle );
    sensitive << ( icmp_ln17_1_fu_210_p2 );
    sensitive << ( sub_ln18_fu_215_p2 );

    SC_METHOD(thread_select_ln21_1_fu_295_p3);
    sensitive << ( select_ln17_1_fu_237_p3 );
    sensitive << ( icmp_ln21_fu_243_p2 );
    sensitive << ( select_ln21_fu_269_p3 );

    SC_METHOD(thread_select_ln21_fu_269_p3);
    sensitive << ( select_ln17_1_fu_237_p3 );
    sensitive << ( icmp_ln21_1_fu_258_p2 );
    sensitive << ( add_ln22_fu_264_p2 );

    SC_METHOD(thread_select_ln9_fu_124_p3);
    sensitive << ( current_speed );
    sensitive << ( or_ln9_fu_100_p2 );
    sensitive << ( add_ln10_fu_106_p2 );

    SC_METHOD(thread_sub_ln17_fu_204_p2);
    sensitive << ( zext_ln17_1_fu_200_p1 );
    sensitive << ( zext_ln17_fu_196_p1 );

    SC_METHOD(thread_sub_ln18_fu_215_p2);
    sensitive << ( current_duty_cycle );
    sensitive << ( select_ln13_reg_313 );

    SC_METHOD(thread_tmp_fu_138_p4);
    sensitive << ( select_ln9_fu_124_p3 );

    SC_METHOD(thread_xor_ln17_fu_226_p2);
    sensitive << ( icmp_ln17_reg_320 );

    SC_METHOD(thread_xor_ln21_fu_277_p2);
    sensitive << ( icmp_ln21_fu_243_p2 );

    SC_METHOD(thread_xor_ln9_fu_118_p2);
    sensitive << ( or_ln9_1_fu_112_p2 );

    SC_METHOD(thread_zext_ln17_1_fu_200_p1);
    sensitive << ( select_ln13_fu_172_p3 );

    SC_METHOD(thread_zext_ln17_fu_196_p1);
    sensitive << ( current_duty_cycle );

    SC_METHOD(thread_zext_ln21_fu_249_p1);
    sensitive << ( select_ln17_1_fu_237_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    current_speed = "00000000";
    current_duty_cycle = "10010110";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "servo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_up, "(port)p_up");
    sc_trace(mVcdFile, p_down, "(port)p_down");
    sc_trace(mVcdFile, p_left, "(port)p_left");
    sc_trace(mVcdFile, p_right, "(port)p_right");
    sc_trace(mVcdFile, p_dutyCycle, "(port)p_dutyCycle");
    sc_trace(mVcdFile, p_dutyCycle_ap_vld, "(port)p_dutyCycle_ap_vld");
    sc_trace(mVcdFile, p_speed, "(port)p_speed");
    sc_trace(mVcdFile, p_speed_ap_vld, "(port)p_speed_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, current_speed, "current_speed");
    sc_trace(mVcdFile, current_duty_cycle, "current_duty_cycle");
    sc_trace(mVcdFile, select_ln13_fu_172_p3, "select_ln13_fu_172_p3");
    sc_trace(mVcdFile, select_ln13_reg_313, "select_ln13_reg_313");
    sc_trace(mVcdFile, icmp_ln17_fu_180_p2, "icmp_ln17_fu_180_p2");
    sc_trace(mVcdFile, icmp_ln17_reg_320, "icmp_ln17_reg_320");
    sc_trace(mVcdFile, zext_ln17_1_fu_200_p1, "zext_ln17_1_fu_200_p1");
    sc_trace(mVcdFile, zext_ln17_1_reg_333, "zext_ln17_1_reg_333");
    sc_trace(mVcdFile, sub_ln17_fu_204_p2, "sub_ln17_fu_204_p2");
    sc_trace(mVcdFile, sub_ln17_reg_338, "sub_ln17_reg_338");
    sc_trace(mVcdFile, or_ln13_fu_166_p2, "or_ln13_fu_166_p2");
    sc_trace(mVcdFile, select_ln21_1_fu_295_p3, "select_ln21_1_fu_295_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, or_ln21_fu_289_p2, "or_ln21_fu_289_p2");
    sc_trace(mVcdFile, icmp_ln9_fu_84_p2, "icmp_ln9_fu_84_p2");
    sc_trace(mVcdFile, icmp_ln9_1_fu_94_p2, "icmp_ln9_1_fu_94_p2");
    sc_trace(mVcdFile, or_ln9_1_fu_112_p2, "or_ln9_1_fu_112_p2");
    sc_trace(mVcdFile, or_ln9_fu_100_p2, "or_ln9_fu_100_p2");
    sc_trace(mVcdFile, add_ln10_fu_106_p2, "add_ln10_fu_106_p2");
    sc_trace(mVcdFile, select_ln9_fu_124_p3, "select_ln9_fu_124_p3");
    sc_trace(mVcdFile, tmp_fu_138_p4, "tmp_fu_138_p4");
    sc_trace(mVcdFile, icmp_ln13_fu_132_p2, "icmp_ln13_fu_132_p2");
    sc_trace(mVcdFile, icmp_ln13_1_fu_148_p2, "icmp_ln13_1_fu_148_p2");
    sc_trace(mVcdFile, and_ln13_fu_154_p2, "and_ln13_fu_154_p2");
    sc_trace(mVcdFile, xor_ln9_fu_118_p2, "xor_ln9_fu_118_p2");
    sc_trace(mVcdFile, add_ln14_fu_160_p2, "add_ln14_fu_160_p2");
    sc_trace(mVcdFile, zext_ln17_fu_196_p1, "zext_ln17_fu_196_p1");
    sc_trace(mVcdFile, icmp_ln17_1_fu_210_p2, "icmp_ln17_1_fu_210_p2");
    sc_trace(mVcdFile, sub_ln18_fu_215_p2, "sub_ln18_fu_215_p2");
    sc_trace(mVcdFile, xor_ln17_fu_226_p2, "xor_ln17_fu_226_p2");
    sc_trace(mVcdFile, select_ln17_fu_219_p3, "select_ln17_fu_219_p3");
    sc_trace(mVcdFile, select_ln17_1_fu_237_p3, "select_ln17_1_fu_237_p3");
    sc_trace(mVcdFile, zext_ln21_fu_249_p1, "zext_ln21_fu_249_p1");
    sc_trace(mVcdFile, add_ln21_fu_253_p2, "add_ln21_fu_253_p2");
    sc_trace(mVcdFile, icmp_ln21_1_fu_258_p2, "icmp_ln21_1_fu_258_p2");
    sc_trace(mVcdFile, add_ln22_fu_264_p2, "add_ln22_fu_264_p2");
    sc_trace(mVcdFile, icmp_ln21_fu_243_p2, "icmp_ln21_fu_243_p2");
    sc_trace(mVcdFile, xor_ln21_fu_277_p2, "xor_ln21_fu_277_p2");
    sc_trace(mVcdFile, and_ln17_fu_231_p2, "and_ln17_fu_231_p2");
    sc_trace(mVcdFile, and_ln21_fu_283_p2, "and_ln21_fu_283_p2");
    sc_trace(mVcdFile, select_ln21_fu_269_p3, "select_ln21_fu_269_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("servo.hdltvin.dat");
    mHdltvoutHandle.open("servo.hdltvout.dat");
}

servo::~servo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void servo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_ln21_fu_289_p2.read()))) {
        current_duty_cycle = select_ln21_1_fu_295_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(or_ln13_fu_166_p2.read(), ap_const_lv1_1))) {
        current_speed = select_ln13_fu_172_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln17_reg_320 = icmp_ln17_fu_180_p2.read();
        select_ln13_reg_313 = select_ln13_fu_172_p3.read();
        sub_ln17_reg_338 = sub_ln17_fu_204_p2.read();
        zext_ln17_1_reg_333 = zext_ln17_1_fu_200_p1.read();
    }
}

void servo::thread_add_ln10_fu_106_p2() {
    add_ln10_fu_106_p2 = (!current_speed.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<8>(): (sc_biguint<8>(current_speed.read()) + sc_bigint<8>(ap_const_lv8_FF));
}

void servo::thread_add_ln14_fu_160_p2() {
    add_ln14_fu_160_p2 = (!select_ln9_fu_124_p3.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(select_ln9_fu_124_p3.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void servo::thread_add_ln21_fu_253_p2() {
    add_ln21_fu_253_p2 = (!zext_ln21_fu_249_p1.read().is_01() || !zext_ln17_1_reg_333.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln21_fu_249_p1.read()) + sc_biguint<9>(zext_ln17_1_reg_333.read()));
}

void servo::thread_add_ln22_fu_264_p2() {
    add_ln22_fu_264_p2 = (!select_ln17_1_fu_237_p3.read().is_01() || !select_ln13_reg_313.read().is_01())? sc_lv<8>(): (sc_biguint<8>(select_ln17_1_fu_237_p3.read()) + sc_biguint<8>(select_ln13_reg_313.read()));
}

void servo::thread_and_ln13_fu_154_p2() {
    and_ln13_fu_154_p2 = (icmp_ln13_fu_132_p2.read() & icmp_ln13_1_fu_148_p2.read());
}

void servo::thread_and_ln17_fu_231_p2() {
    and_ln17_fu_231_p2 = (icmp_ln17_1_fu_210_p2.read() & xor_ln17_fu_226_p2.read());
}

void servo::thread_and_ln21_fu_283_p2() {
    and_ln21_fu_283_p2 = (icmp_ln21_1_fu_258_p2.read() & xor_ln21_fu_277_p2.read());
}

void servo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void servo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void servo::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void servo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void servo::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void servo::thread_icmp_ln13_1_fu_148_p2() {
    icmp_ln13_1_fu_148_p2 = (!tmp_fu_138_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_138_p4.read() == ap_const_lv5_0);
}

void servo::thread_icmp_ln13_fu_132_p2() {
    icmp_ln13_fu_132_p2 = (!p_up.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(p_up.read() != ap_const_lv8_0);
}

void servo::thread_icmp_ln17_1_fu_210_p2() {
    icmp_ln17_1_fu_210_p2 = (!sub_ln17_reg_338.read().is_01() || !ap_const_lv9_63.is_01())? sc_lv<1>(): (sc_bigint<9>(sub_ln17_reg_338.read()) > sc_bigint<9>(ap_const_lv9_63));
}

void servo::thread_icmp_ln17_fu_180_p2() {
    icmp_ln17_fu_180_p2 = (!p_left.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(p_left.read() == ap_const_lv8_0);
}

void servo::thread_icmp_ln21_1_fu_258_p2() {
    icmp_ln21_1_fu_258_p2 = (!add_ln21_fu_253_p2.read().is_01() || !ap_const_lv9_C9.is_01())? sc_lv<1>(): (sc_biguint<9>(add_ln21_fu_253_p2.read()) < sc_biguint<9>(ap_const_lv9_C9));
}

void servo::thread_icmp_ln21_fu_243_p2() {
    icmp_ln21_fu_243_p2 = (!p_right.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(p_right.read() == ap_const_lv8_0);
}

void servo::thread_icmp_ln9_1_fu_94_p2() {
    icmp_ln9_1_fu_94_p2 = (!current_speed.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(current_speed.read() == ap_const_lv8_0);
}

void servo::thread_icmp_ln9_fu_84_p2() {
    icmp_ln9_fu_84_p2 = (!p_down.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(p_down.read() == ap_const_lv8_0);
}

void servo::thread_or_ln13_fu_166_p2() {
    or_ln13_fu_166_p2 = (and_ln13_fu_154_p2.read() | xor_ln9_fu_118_p2.read());
}

void servo::thread_or_ln21_fu_289_p2() {
    or_ln21_fu_289_p2 = (and_ln17_fu_231_p2.read() | and_ln21_fu_283_p2.read());
}

void servo::thread_or_ln9_1_fu_112_p2() {
    or_ln9_1_fu_112_p2 = (icmp_ln9_fu_84_p2.read() | icmp_ln9_1_fu_94_p2.read());
}

void servo::thread_or_ln9_fu_100_p2() {
    or_ln9_fu_100_p2 = (icmp_ln9_fu_84_p2.read() | icmp_ln9_1_fu_94_p2.read());
}

void servo::thread_p_dutyCycle() {
    p_dutyCycle = (!icmp_ln21_fu_243_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln21_fu_243_p2.read()[0].to_bool())? select_ln17_1_fu_237_p3.read(): select_ln21_fu_269_p3.read());
}

void servo::thread_p_dutyCycle_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        p_dutyCycle_ap_vld = ap_const_logic_1;
    } else {
        p_dutyCycle_ap_vld = ap_const_logic_0;
    }
}

void servo::thread_p_speed() {
    p_speed = select_ln13_reg_313.read();
}

void servo::thread_p_speed_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        p_speed_ap_vld = ap_const_logic_1;
    } else {
        p_speed_ap_vld = ap_const_logic_0;
    }
}

void servo::thread_select_ln13_fu_172_p3() {
    select_ln13_fu_172_p3 = (!and_ln13_fu_154_p2.read()[0].is_01())? sc_lv<8>(): ((and_ln13_fu_154_p2.read()[0].to_bool())? add_ln14_fu_160_p2.read(): select_ln9_fu_124_p3.read());
}

void servo::thread_select_ln17_1_fu_237_p3() {
    select_ln17_1_fu_237_p3 = (!icmp_ln17_reg_320.read()[0].is_01())? sc_lv<8>(): ((icmp_ln17_reg_320.read()[0].to_bool())? current_duty_cycle.read(): select_ln17_fu_219_p3.read());
}

void servo::thread_select_ln17_fu_219_p3() {
    select_ln17_fu_219_p3 = (!icmp_ln17_1_fu_210_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln17_1_fu_210_p2.read()[0].to_bool())? sub_ln18_fu_215_p2.read(): current_duty_cycle.read());
}

void servo::thread_select_ln21_1_fu_295_p3() {
    select_ln21_1_fu_295_p3 = (!icmp_ln21_fu_243_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln21_fu_243_p2.read()[0].to_bool())? select_ln17_1_fu_237_p3.read(): select_ln21_fu_269_p3.read());
}

void servo::thread_select_ln21_fu_269_p3() {
    select_ln21_fu_269_p3 = (!icmp_ln21_1_fu_258_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln21_1_fu_258_p2.read()[0].to_bool())? add_ln22_fu_264_p2.read(): select_ln17_1_fu_237_p3.read());
}

void servo::thread_select_ln9_fu_124_p3() {
    select_ln9_fu_124_p3 = (!or_ln9_fu_100_p2.read()[0].is_01())? sc_lv<8>(): ((or_ln9_fu_100_p2.read()[0].to_bool())? current_speed.read(): add_ln10_fu_106_p2.read());
}

void servo::thread_sub_ln17_fu_204_p2() {
    sub_ln17_fu_204_p2 = (!zext_ln17_fu_196_p1.read().is_01() || !zext_ln17_1_fu_200_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln17_fu_196_p1.read()) - sc_biguint<9>(zext_ln17_1_fu_200_p1.read()));
}

void servo::thread_sub_ln18_fu_215_p2() {
    sub_ln18_fu_215_p2 = (!current_duty_cycle.read().is_01() || !select_ln13_reg_313.read().is_01())? sc_lv<8>(): (sc_biguint<8>(current_duty_cycle.read()) - sc_biguint<8>(select_ln13_reg_313.read()));
}

void servo::thread_tmp_fu_138_p4() {
    tmp_fu_138_p4 = select_ln9_fu_124_p3.read().range(7, 3);
}

void servo::thread_xor_ln17_fu_226_p2() {
    xor_ln17_fu_226_p2 = (icmp_ln17_reg_320.read() ^ ap_const_lv1_1);
}

void servo::thread_xor_ln21_fu_277_p2() {
    xor_ln21_fu_277_p2 = (icmp_ln21_fu_243_p2.read() ^ ap_const_lv1_1);
}

void servo::thread_xor_ln9_fu_118_p2() {
    xor_ln9_fu_118_p2 = (or_ln9_1_fu_112_p2.read() ^ ap_const_lv1_1);
}

void servo::thread_zext_ln17_1_fu_200_p1() {
    zext_ln17_1_fu_200_p1 = esl_zext<9,8>(select_ln13_fu_172_p3.read());
}

void servo::thread_zext_ln17_fu_196_p1() {
    zext_ln17_fu_196_p1 = esl_zext<9,8>(current_duty_cycle.read());
}

void servo::thread_zext_ln21_fu_249_p1() {
    zext_ln21_fu_249_p1 = esl_zext<9,8>(select_ln17_1_fu_237_p3.read());
}

void servo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void servo::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_up\" :  \"" << p_up.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_down\" :  \"" << p_down.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_left\" :  \"" << p_left.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_right\" :  \"" << p_right.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_dutyCycle\" :  \"" << p_dutyCycle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_dutyCycle_ap_vld\" :  \"" << p_dutyCycle_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_speed\" :  \"" << p_speed.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_speed_ap_vld\" :  \"" << p_speed_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


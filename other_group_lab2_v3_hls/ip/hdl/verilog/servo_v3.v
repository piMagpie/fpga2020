// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="servo_v3,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.261500,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=120,HLS_VERSION=2019_1}" *)

module servo_v3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_left,
        in_right,
        in_up,
        in_down,
        out_speed,
        out_speed_ap_vld,
        out_control
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_left;
input  [7:0] in_right;
input  [7:0] in_up;
input  [7:0] in_down;
output  [7:0] out_speed;
output   out_speed_ap_vld;
input  [7:0] out_control;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_speed_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] speed;
wire   [7:0] select_ln27_fu_119_p3;
reg   [7:0] ap_phi_mux_speed_loc_1_phi_fu_54_p6;
wire   [0:0] icmp_ln25_fu_63_p2;
wire   [7:0] select_ln41_fu_92_p3;
wire   [0:0] icmp_ln39_fu_74_p2;
wire   [0:0] icmp_ln41_fu_80_p2;
wire   [7:0] add_ln47_fu_86_p2;
wire   [0:0] icmp_ln27_fu_107_p2;
wire   [7:0] add_ln33_fu_113_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 speed = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln25_fu_63_p2 == 1'd1)) begin
            speed <= select_ln27_fu_119_p3;
        end else if (((icmp_ln39_fu_74_p2 == 1'd1) & (icmp_ln25_fu_63_p2 == 1'd0))) begin
            speed <= select_ln41_fu_92_p3;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((icmp_ln39_fu_74_p2 == 1'd0) & (icmp_ln25_fu_63_p2 == 1'd0))) begin
            ap_phi_mux_speed_loc_1_phi_fu_54_p6 = speed;
        end else if (((icmp_ln39_fu_74_p2 == 1'd1) & (icmp_ln25_fu_63_p2 == 1'd0))) begin
            ap_phi_mux_speed_loc_1_phi_fu_54_p6 = select_ln41_fu_92_p3;
        end else if ((icmp_ln25_fu_63_p2 == 1'd1)) begin
            ap_phi_mux_speed_loc_1_phi_fu_54_p6 = select_ln27_fu_119_p3;
        end else begin
            ap_phi_mux_speed_loc_1_phi_fu_54_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_speed_loc_1_phi_fu_54_p6 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_speed_ap_vld = 1'b1;
    end else begin
        out_speed_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_113_p2 = (speed + 8'd1);

assign add_ln47_fu_86_p2 = ($signed(speed) + $signed(8'd255));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign icmp_ln25_fu_63_p2 = ((in_up == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_107_p2 = ((speed == 8'd8) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_74_p2 = ((in_down == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_80_p2 = ((speed == 8'd0) ? 1'b1 : 1'b0);

assign out_speed = ap_phi_mux_speed_loc_1_phi_fu_54_p6;

assign select_ln27_fu_119_p3 = ((icmp_ln27_fu_107_p2[0:0] === 1'b1) ? 8'd8 : add_ln33_fu_113_p2);

assign select_ln41_fu_92_p3 = ((icmp_ln41_fu_80_p2[0:0] === 1'b1) ? 8'd0 : add_ln47_fu_86_p2);

endmodule //servo_v3

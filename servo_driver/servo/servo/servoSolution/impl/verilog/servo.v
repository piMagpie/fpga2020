// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="servo,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.877000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10,HLS_SYN_LUT=79,HLS_VERSION=2019_2}" *)

module servo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        up,
        down,
        left_r,
        right_r,
        dutyCycle_i,
        dutyCycle_o,
        dutyCycle_o_ap_vld,
        speed
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] up;
input  [0:0] down;
input  [0:0] left_r;
input  [0:0] right_r;
input  [7:0] dutyCycle_i;
output  [7:0] dutyCycle_o;
output   dutyCycle_o_ap_vld;
input  [7:0] speed;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dutyCycle_o_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] trunc_ln22_fu_87_p1;
reg   [6:0] trunc_ln22_reg_108;
wire   [0:0] icmp_ln22_fu_91_p2;
reg   [0:0] icmp_ln22_reg_113;
wire    ap_CS_fsm_state2;
wire   [7:0] sub_ln14_fu_59_p2;
wire   [7:0] select_ln3_fu_65_p3;
wire   [7:0] add_ln18_fu_73_p2;
wire   [7:0] select_ln3_1_fu_79_p3;
wire   [6:0] select_ln22_fu_97_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln22_reg_113 <= icmp_ln22_fu_91_p2;
        trunc_ln22_reg_108 <= trunc_ln22_fu_87_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dutyCycle_o_ap_vld = 1'b1;
    end else begin
        dutyCycle_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_73_p2 = (speed + select_ln3_fu_65_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign dutyCycle_o = select_ln22_fu_97_p3;

assign icmp_ln22_fu_91_p2 = (($signed(select_ln3_1_fu_79_p3) < $signed(8'd100)) ? 1'b1 : 1'b0);

assign select_ln22_fu_97_p3 = ((icmp_ln22_reg_113[0:0] === 1'b1) ? 7'd100 : trunc_ln22_reg_108);

assign select_ln3_1_fu_79_p3 = ((right_r[0:0] === 1'b1) ? add_ln18_fu_73_p2 : select_ln3_fu_65_p3);

assign select_ln3_fu_65_p3 = ((left_r[0:0] === 1'b1) ? sub_ln14_fu_59_p2 : dutyCycle_i);

assign sub_ln14_fu_59_p2 = (dutyCycle_i - speed);

assign trunc_ln22_fu_87_p1 = select_ln3_1_fu_79_p3[6:0];

endmodule //servo
